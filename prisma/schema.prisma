generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../db_dumps/local.db"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  folders       Folder[]
  ingredients   Ingredient[]
  recipes       Recipe[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  recipes   Recipe[] @relation("FolderToRecipe")

  @@unique([userId, name])
  @@map("folders")
}

model Ingredient {
  id      Int                @id @default(autoincrement())
  name    String
  typeId  Int                @default(0)
  userId  String
  isFlour Boolean            @default(false)
  user    User               @relation(fields: [userId], references: [id])
  type    IngredientType     @relation(fields: [typeId], references: [id])
  recipes RecipeIngredient[]

  @@unique([userId, name])
  @@map("ingredients")
}

model IngredientType {
  id          Int          @id @default(autoincrement())
  type        String       @unique
  description String
  isLiquid    Boolean      @default(false)
  ingredients Ingredient[]

  @@map("ingredient_types")
}

model RecipeIngredient {
  id            Int        @id @default(autoincrement())
  ingredientId  Int
  recipeId      Int
  weightInGrams Int
  ingredient    Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe        Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_ingredients")
}

model Recipe {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  userId       String?
  name         String
  notes        String?
  servings     Int                @default(1)
  ingredients  RecipeIngredient[]
  subRecipes   RecipeSubRecipe[]
  usedIn       RecipeSubRecipe[]  @relation("SubRecipeUsage")
  user         User?              @relation(fields: [userId], references: [id])
  folders      Folder[]           @relation("FolderToRecipe")
  isPreferment Boolean            @default(false)

  @@index([userId])
  @@map("recipes")
}

model RecipeSubRecipe {
  id            Int    @id @default(autoincrement())
  recipeId      Int
  subRecipeId   Int
  weightInGrams Int
  recipe        Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  subRecipe     Recipe @relation("SubRecipeUsage", fields: [subRecipeId], references: [id], onDelete: Cascade)

  @@map("recipe_sub_recipes")
}
