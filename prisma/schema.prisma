// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index(userId)
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  folders       Folder[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Folder {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String   @unique
  recipes   Recipe[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
  @@map("folders")
}

model Recipe {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  folders         Folder[]
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  name            String @unique
  doughballWeight Int
  flourRatio      Float    @default(0)
  waterRatio      Float    @default(0)
  saltRatio       Float    @default(0)
  oilRatio        Float    @default(0)
  sugarRatio      Float    @default(0)
  yeastRatio      Float    @default(0)
  notes           String?  @db.Text

  @@index(userId)
  @@map("recipes")
}
